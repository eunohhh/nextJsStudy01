/*
  Auto-generated by Spline
*/
"use client"
import useSpline from '@splinetool/r3f-spline'
import { useRef, useState } from 'react';
import { OrthographicCamera, PerspectiveCamera } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';

export default function Scene({ ...props }) {

  const groupRef = useRef();
  const [zPosition, setZPosition] = useState(146.78); // 초기 Z 위치
  const [direction, setDirection] = useState(-1); // -1: 감소, 1: 증가

  const { nodes, materials } = useSpline('https://prod.spline.design/yjmAfK59g5dP4p1M/scene.splinecode');

  useFrame(()=>{
    if (groupRef.current) {

      let targetZ = direction === -1 ? 60.78 : 146.78;

      setZPosition(prevZ => {
          let nextZ = prevZ + (targetZ - prevZ) * 0.02;
          
          // 목표 위치에 도달하면 방향 전환
          if ((direction === -1 && nextZ <= targetZ) || (direction === 1 && nextZ >= targetZ)) {
              setDirection(direction * -1);
          }
          
          return nextZ;
      });

      groupRef.current.position.z = zPosition;
  
    }
  })
  // 146.78 > 60.78
  return (
    <>
      <color attach="background" args={['white']} />
      <group {...props} dispose={null}>
        <scene name="Scene">
          <group name="Emoji People" position={[153.7, 278.85, 0]} rotation={[0, 0, -0.38]} scale={0.6}>
            <mesh
              name="Cube"
              geometry={nodes.Cube.geometry}
              material={materials.red}
              castShadow
              receiveShadow
              position={[16.55, 14.53, 25.8]}
              rotation={[-0.29, 0.16, -0.35]}
              scale={0.71}
            />
            <mesh
              name="Cube 2"
              geometry={nodes['Cube 2'].geometry}
              material={materials.red}
              castShadow
              receiveShadow
              position={[-16.55, 14.88, 25.67]}
              rotation={[-0.29, -0.16, 0.35]}
              scale={0.71}
            />
            <mesh
              name="Cube 3"
              geometry={nodes['Cube 3'].geometry}
              material={materials['emoji-eye']}
              castShadow
              receiveShadow
              position={[0.24, -19.1, 28.99]}
              scale={0.71}
            />
            <mesh
              name="Sphere"
              geometry={nodes.Sphere.geometry}
              material={materials['emoji-face']}
              castShadow
              receiveShadow
              position={[0.47, -4.23, -5.62]}
              scale={0.71}
            />
          </group>

          <group ref={groupRef} name="Letters" position={[4.57, 203.49, zPosition]} rotation={[-Math.PI / 2, 0, 0]} scale={0.5}>
            <group name="l_letter" position={[-45.06, 55.43, 21.15]} rotation={[0, 0, 0.34]} scale={1.02}>
              <mesh
                name="Ellipse"
                geometry={nodes.Ellipse.geometry}
                material={materials.red}
                castShadow
                receiveShadow
                position={[-0.15, -4.7, 5.54]}
                rotation={[-0.19, 0, 0]}
              />
              <mesh
                name="Cube1"
                geometry={nodes.Cube1.geometry}
                material={materials.white}
                castShadow
                receiveShadow
                position={[0, 16.8, 0.9]}
                rotation={[-0.18, 0, 0]}
                scale={[1.05, 1, 1]}
              />
              <group name="letter 2" position={[0.16, 29.69, 0]} scale={0.71}>
                <mesh
                  name="Cube2"
                  geometry={nodes.Cube2.geometry}
                  material={materials.white}
                  castShadow
                  receiveShadow
                  position={[0, -51.64, -1.82]}
                  scale={[1, 1, 0.02]}
                />
              </group>
              <group name="letter" position={[0.16, 29.69, 0]} scale={0.71}>
                <mesh
                  name="Cube3"
                  geometry={nodes.Cube3.geometry}
                  material={materials.white}
                  castShadow
                  receiveShadow
                  position={[0, -51.64, -1.82]}
                  scale={[1, 1, 0.02]}
                />
              </group>
            </group>
            <group name="r_letter" position={[12.38, 57.35, 8.51]} scale={1.57}>
              <group name="group" position={[0.1, 19.38, 0]} scale={0.46}>
                <mesh
                  name="Cube4"
                  geometry={nodes.Cube4.geometry}
                  material={materials.white}
                  castShadow
                  receiveShadow
                  position={[0, -51.64, -1.82]}
                  scale={[1, 1, 0.02]}
                />
              </group>
              <mesh
                name="Ellipse1"
                geometry={nodes.Ellipse1.geometry}
                material={materials.red}
                castShadow
                receiveShadow
                position={[-0.1, -3.07, 3.62]}
                rotation={[-0.19, 0, 0]}
                scale={0.65}
              />
              <mesh
                name="Cube5"
                geometry={nodes.Cube5.geometry}
                material={materials.white}
                castShadow
                receiveShadow
                position={[0, 10.96, 0.59]}
                rotation={[-0.18, 0, 0]}
                scale={[0.68, 0.65, 0.65]}
              />
              <group name="letter1" position={[0.1, 19.38, 0]} scale={0.46}>
                <mesh
                  name="Cube6"
                  geometry={nodes.Cube6.geometry}
                  material={materials.white}
                  castShadow
                  receiveShadow
                  position={[0, -51.64, -1.82]}
                  scale={[1, 1, 0.02]}
                />
              </group>
            </group>
          </group>

          <group name="object_office_postbox" scale={1}>
            <mesh
              name="lettericon"
              geometry={nodes.lettericon.geometry}
              material={materials.white}
              castShadow
              receiveShadow
              position={[0.27, 145.79, 70.03]}
            />
            <group name="body" position={[0, 60.72, -38.01]}>
              <mesh
                name="Cylinder"
                geometry={nodes.Cylinder.geometry}
                material={materials.black}
                castShadow
                receiveShadow
                position={[-1.45, -40.25, 30.85]}
                scale={[1.5, 1, 1.5]}
              />
              <mesh
                name="Cube7"
                geometry={nodes.Cube7.geometry}
                material={materials.red}
                castShadow
                receiveShadow
                position={[0, 54.04, 34.25]}
                scale={1.2}
              />
            </group>
          </group>
          <directionalLight
            name="Directional Light"
            castShadow
            intensity={0.7}
            shadow-mapSize-width={1024}
            shadow-mapSize-height={1024}
            shadow-camera-near={-10000}
            shadow-camera-far={100000}
            shadow-camera-left={-500}
            shadow-camera-right={500}
            shadow-camera-top={500}
            shadow-camera-bottom={-500}
            position={[200, 300, 300]}
          />
          <OrthographicCamera 
            name="1" 
            makeDefault={true} 
            far={10000} 
            near={-500} 
            top={600}
            position={[-200, 200, 400]}
            zoom={1.5}
          />

          <hemisphereLight name="Default Ambient Light" intensity={0.75} color="#eaeaea" />

          {/* <PerspectiveCamera
            name="Camera"
            makeDefault={true}
            far={100000}
            near={70}
            fov={45}
            position={[9.31, 173.61, 415.35]}
            rotation={[-0.06, -0.01, 0]}
            scale={1}
          /> */}
        </scene>
      </group>
    </>
  )
}


// 무한반복코드
// 방향에 따라 목표값 설정
// let targetZ = direction === -1 ? 60.78 : 146.78;

// // nextZ 계산
// let nextZ = zPosition + (targetZ - zPosition) * 0.1;

// // 목표 위치에 도달하면 방향 전환
// // if ((direction === -1 && nextZ <= targetZ) || (direction === 1 && nextZ >= targetZ)) {
// if (nextZ <= 60.79 ) {

//   // nextZ = targetZ; // 목표 위치에 정확히 맞춤
//   setDirection(-direction); // 방향 전환
//   nextZ = zPosition + (targetZ - zPosition) * 0.1;
// }else if( nextZ > 146.77){
//   setDirection(-direction); // 방향 전환
//   nextZ = zPosition + (targetZ - zPosition) * 0.1;
// }

// setZPosition(nextZ);
// groupRef.current.position.z = nextZ;